#!/bin/sh

main() {
	JWK_FILE="$1"
	generate_asn1_genconf \
	    | generate_der_key \
	    | generate_pem_key
}

generate_der_key() {
    openssl asn1parse -genconf /dev/stdin -out /dev/stdout
}

generate_pem_key() {
    openssl rsa -inform der
}

generate_asn1_genconf() {
	echo "asn1 = SEQUENCE:private_key"
	echo
	echo "[private_key]"
	echo "version = INTEGER:0"
	echo
	echo "modulus = INTEGER:$(json_to_hex 'n')"
	echo "public_exponent = INTEGER:$(json_to_hex 'e')"
	echo "private_exponent = INTEGER:$(json_to_hex 'd')"
	echo "first_prime_factor = INTEGER:$(json_to_hex 'p')"
	echo "second_prime_factor = INTEGER:$(json_to_hex 'q')"
	echo "first_CRT_exponent = INTEGER:$(json_to_hex 'dp')"
	echo "second_CRT_exponent = INTEGER:$(json_to_hex 'dq')"
	echo "CRT_coefficient = INTEGER:$(json_to_hex 'qi')"
}

json_to_hex() {
	jq -Mcr ".$1" < "$JWK_FILE" \
		| pad_with '=' 4 \
		| decode_base64url \
		| to_hex \
		| prefix '0x'
}

pad_with() {
	test $# -gt 2 && return 1

	read -r padded
	until test "$(( ${#padded} % ${2-4} ))" -eq 0; do
		padded="${padded}${1-=}"
	done
	printf "%s" "$padded"
}

decode_base64url() {
	tr '\-_' '+/' | base64 -d
}

to_hex() {
	xxd -ps -u | tr -d '\n\r'
}

prefix() {
	read -r in
	echo "${*}${in}"
}

# Do not run main if script is sourced
${__SOURCED__+return}

main "$@"
